    Lambdas provide a clear and concise way to represent one method interface using an expression.d


   **** Anonymous class ****
    Syntax of Anonymous Classes

    As mentioned previously, an anonymous class is an expression. The syntax of an anonymous class expression is like
     the invocation of a constructor, except that there is a class definition contained in a block of code.

    Consider the instantiation of the frenchGreeting object:

    ////////////////////////////////////////////

            HelloWorld frenchGreeting = new HelloWorld() {
                String name = "tout le monde";
                public void greet() {
                    greetSomeone("tout le monde");
                }
                public void greetSomeone(String someone) {
                    name = someone;
                    System.out.println("Salut " + name);
                }
            };

     ////////////////////////////////////////////

    The anonymous class expression consists of the following:

    The new operator

    The name of an interface to implement or a class to extend. In this example, the anonymous class is implementing the interface HelloWorld.

    Parentheses that contain the arguments to a constructor, just like a normal class instance creation expression. Note:
    When you implement an interface, there is no constructor, so you use an empty pair of parentheses, as in this example.

    A body, which is a class declaration body. More specifically, in the body, method declarations are allowed but statements are not.

    Because an anonymous class definition is an expression, it must be part of a statement. In this example, the anonymous class
    expression is part of the statement that instantiates the frenchGreeting object. (This explains why there is a semicolon after the closing brace.)

    **** Lambda expressions ****

   ////////////////////////////////////////////
    General Lambda syntax:
    (arg1 value, arg2 value) -> {body}

    Some simple examples:

    (int a, int b) -> {  return a + b; }

    () -> System.out.println("Hello World");

    (String s) -> { System.out.println(s); }

    () -> 42

    () -> { return 3.1415 };

   ////////////////////////////////////////////

    Some examples of functional interfaces with lambda expressions:

       ////////////////////////////////////////////
    //Interface name      //method implementation
    Consumer<Integer>  c = (int x) -> { System.out.println(x) };

    BiConsumer<Integer, String> b = (Integer x, String y) -> System.out.println(x + " : " + y);

    Predicate<String> p = (String s) -> { s == null };

   ////////////////////////////////////////////


   declaration of functional interface:


   ////////////////////////////////////////////

   //define a functional interface
   @FunctionalInterface
   public interface WorkerInterface {

   	public void doSomeWork();

   }

      ////////////////////////////////////////////


      ////////////////////////////////////////////

invoking functional interface:

public class WorkerInterfaceTest {

	public static void execute(WorkerInterface worker) {
		worker.doSomeWork();
	}

	public static void main(String [] args) {

		//invoke doSomeWork using Annonymous class
		execute(new WorkerInterface() {
			@Override
			public void doSomeWork() {
				System.out.println("Worker invoked using Anonymous class");
			}
		});

		//invoke doSomeWork using Lambda expression
		execute( () -> System.out.println("Worker invoked using Lambda expression") );
	}

}

      ////////////////////////////////////////////

:: is called Method Reference. It is basically a reference to a single method. i.e.
it refers to an existing method by name.